#!groovy 
pipeline {
    environment {
        GIT_SSH_COMMAND = 'ssh -i key'
        GIT_REPO = 'git@ssh.dev.azure.com:v3/Dataspace4Health/DS4H/keycloak-vc-issuer'
    }
    parameters {
        string(name: "registery", description: "Azure Container Registery Name", defaultValue: "dh4sdev")
        string(name: "registery_domain", description: "Azure Container Registery domaine name", defaultValue: "dh4sdev.azurecr.io")
        string(name: "image" ,description: "Keycloak vc issuer image name", defaultValue: "keycloak-vc-issuer")
    }
    agent {label 'worker'}
    stages {
        stage("Clonning Repo") {
            steps {
                git credentialsId: 'azure-devops', branch: 'jenkins', url: GIT_REPO
                withCredentials([sshUserPrivateKey(credentialsId: 'azure-devops', keyFileVariable: 'SSH_KEY')]) {
                    sh('cp "$SSH_KEY" key')
                    sh('chmod 400 key')
                }
            }
        }

        stage("Build Container Image") {
            steps {
                script {
                    // Container image build
                    def random = UUID.randomUUID().toString()
                    def pipeline = env.JOB_NAME.replaceAll(' ', '-').toLowerCase()
                    def randomImageName = "jenkins-generated-image-${pipeline}:${random}"
                    env.randomImageName = randomImageName
                    // sh "mvn clean package"
                    sh "docker build -t ${randomImageName} -f deploy/Dockerfile-init ."
                }
            }
        }

        stage("Clean Up") {
            steps {
                script {
                    sh "docker rmi ${env.randomImageName}"
                }
            }
        }
    }
    post {
        always {
            script {
                cleanWs()
            }
        }
    }
}

def getCredential(id) {
    def credential = 'None'
    try {
        withCredentials([string(credentialsId: id, variable: 'TEMP_CREDENTIAL')]) {
            if (TEMP_CREDENTIAL) {
                credential = TEMP_CREDENTIAL
                echo "Credential ${id} is set."
            } else {
                echo "Credential ${id} is not set, falling back to empty string."
            }
        }
    } catch (Exception e) {
        echo "Credential ${id} not found or an error occurred, falling back to empty string."
    }
    return credential
}